<?php
// $Id$

/**
 * @file
 * PayPal Instant Payment Notifications handlers.
 */

function uc_ebay_ipn($order_id = NULL) {
  // Don't handle IPNs generated by Ubercart checkouts.
  /* if (!$order_id) {
    module_load_include('inc', 'uc_paypal', 'uc_paypal.pages');
    return uc_paypal_ipn($order_id);
  } */

  watchdog('uc_paypal', 'Receiving IPN. <pre>@debug</pre>', array('@debug' => print_r($_POST, TRUE)));

  // Assign posted variables to local variables
  $item_ids = array_unique(array_filter(explode(',', check_plain($_POST['item_number']))));
  $payment_status = check_plain($_POST['payment_status']);
  $total_payment_amount = check_plain($_POST['mc_gross']);
  $payment_currency = check_plain($_POST['mc_currency']);
  $payment_fee = check_plain($_POST['mc_fee']);
  $receiver_email = check_plain($_POST['receiver_email']);
  $txn_id = check_plain($_POST['txn_id']);
  $txn_type = check_plain($_POST['txn_type']);
  $payer_email = check_plain($_POST['payer_email']);

  $req = '';

  foreach ($_POST as $key => $value) {
    $value = urlencode(stripslashes($value));
    $req .= $key .'='. $value .'&';
  }

  $req .= 'cmd=_notify-validate';

  if (variable_get('uc_paypal_wpp_server', '') == 'https://api-3t.paypal.com/nvp') {
    $host = 'https://www.paypal.com/cgi-bin/webscr';
  }
  else {
    $host = variable_get('uc_paypal_wps_server', 'https://www.sandbox.paypal.com/cgi-bin/webscr');
  }

  $response = drupal_http_request($host, array(), 'POST', $req);

  // TODO: Change this to property_exists when we have a PHP requirement >= 5.1.
  if (array_key_exists('error', $response)) {
    watchdog('uc_paypal', 'IPN failed with HTTP error @error, code @code.', array('@error' => $response->error, '@code' => $response->code), WATCHDOG_ERROR);
    return;
  }

  if (strcmp($response->data, 'VERIFIED') == 0) {
    watchdog('uc_paypal', 'IPN transaction %txn_id verified.', array('%txn_id' => $txn_id));

    $duplicate = db_result(db_query("SELECT COUNT(*) FROM {uc_payment_paypal_ipn} WHERE txn_id = '%s' AND status <> 'Pending'", $txn_id));
    if ($duplicate > 0) {
      if ($order->payment_method != 'credit') {
        watchdog('uc_paypal', 'IPN transaction ID has been processed before.', array(), WATCHDOG_NOTICE);
      }
      return;
    }

    if ($txn_type != 'web_accept') {
      db_query("INSERT INTO {uc_payment_paypal_ipn} (order_id, txn_id, txn_type, mc_gross, status, receiver_email, payer_email, received) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', %d)",
        $order_id, $txn_id, $txn_type, $total_payment_amount, $payment_status, $receiver_email, $payer_email, time());

      return;
    }

    // Amazingly, the PayPal IPN is sent to us about a minute before it is
    // recorded at eBay. PayPal isn't waiting on a response, so allow some time
    // to pass before figuring out which transaction the payment goes to.
    //sleep(110);

    // The eBay API doesn't let us search for transactions by the PayPal
    // transaction ID. However, the PayPal IPN comes with the item ID that it
    // pays for. So instead, we search through all of the eBay transactions
    // attached to that item for the PayPal transaction ID.

    // eBay and PayPal transactions have a many-to-many relationship, so we
    // have to jump through loops to match the payments to the Ubercart order.

    $item_transactions = array();
    $txn_payments = array();

    $session = uc_ebay_create_session(array('GetItemTransactionsRequestType'));
    $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');

    $req = new GetItemTransactionsRequestType();
    $req->setDetailLevel('ReturnAll');
    $req->setNumberOfDays(5);
    $pag = new PaginationType();
    $pag->setEntriesPerPage(20);

    foreach ($item_ids as $item_id) {
      $page_number = 1;
      $pag->setPageNumber($page_number);
      $req->setPagination($pag);
      $req->setItemID($item_id);

      $res = $cs->getItemTransactions($req);
      uc_debug(9, '<pre>'. print_r($res, TRUE) .'</pre>');
      if ($page_result = $res->getPaginationResult()) {
        while ($page_number <= $page_result->getTotalNumberOfPages()) {
          // Some of the item's transactions.
          $transactions = $res->getTransactionArray();
          uc_debug(9, '<pre>'. print_r($transactions, TRUE) .'</pre>');

          foreach ($transactions as $id => $transaction) {
            $qty = $transaction->getQuantityPurchased();

            // A single eBay transaction may be paid with several PayPal payments.
            if ($paypal_txns = $transaction->getExternalTransaction()) {
              foreach ($paypal_txns as $id => $paypal_txn) {
                if ($txn_id == $paypal_txn->getExternalTransactionID()) {
                  // This eBay transaction was paid with this PayPal transaction,
                  // so add it to the list
                  $item_transactions[] = array($item_id, $transaction->getTransactionID());

                  uc_debug(9, '<pre>'. print_r($transaction, TRUE) .'</pre>');

                  // Save the payment amount for this particular transaction so it
                  // can be added to the order balance.
                  $amount = $transaction->getTransactionPrice()->getTypeValue() * $qty;
                  if ($selected = $transaction->getShippingServiceSelected()) {
                    $amount += $selected->getShippingServiceCost()->getTypeValue();

                    if ($additional_cost = $selected->getShippingServiceAdditionalCost()) {
                      $amount += $additional_cost->getTypeValue() * ($qty - 1);
                    }

                    if ($insurance_cost = $selected->getShippingInsuranceCost()) {
                      $amount += $insurance_cost->getTypeValue() * $qty;
                    }

                    if ($surcharge = $selected->getShippingSurcharge()) {
                      $amount += $surcharge->getTypeValue();
                    }
                  }
                  if ($details = $transaction->getShippingDetails()) {
                    $amount += $details->getInsuranceFee()->getTypeValue() * $qty;

                    if ($sales_tax = $details->getSalesTax()) {
                      $amount += $sales_tax->getSalesTaxAmount()->getTypeValue();
                    }
                  }

                  uc_debug(9, 'Transaction amount: '. uc_currency_format($amount));

                  $txn_payments[$item_id][$transaction->getTransactionID()] = $amount;
                }
              }
            }
          }

          $page_number++;

          // Get more eBay transactions, if necessary.
          if ($page_number <= $page_result->getTotalNumberOfPages()) {
            $page->setPageNumber($page_number);
            $req->setPagination($pag);
            $res = $cs->getItemTransactions($req);
            $page_result = $res->getPaginationResult();
          }
        }
      }
    }

    uc_debug(9, '$item_transactions:<pre>'. print_r($item_transactions, TRUE) .'</pre>');
    uc_debug(9, '$txn_payments:<pre>'. print_r($txn_payments, TRUE) .'</pre>');

    if (count($item_transactions)) {
      // A single PayPal payment can purchase several eBay transactions. It's
      // possible these will be spread out over several Ubercart orders as
      // well.
      $conditions = array();
      $args = array();
      foreach ($item_transactions as $i_t) {
        $conditions[] = "(item_id = '%s' AND transaction_id = '%s')";
        $args[] = $i_t[0];
        $args[] = $i_t[1];
      }
      $where = implode(" OR ", $conditions);
      $result = db_query("SELECT o.order_id, o.uid, it.item_id, it.transaction_id FROM {uc_ebay_item_transactions} AS it LEFT JOIN {uc_orders} AS o ON it.order_id = o.order_id WHERE $where", $args);

      $context = array(
        'revision' => 'formatted-original',
        'type' => 'amount',
      );
      $options = array(
        'sign' => FALSE,
      );

      $order_obj = NULL;

      while ($order = db_fetch_object($result)) {
        $order_id = $order->order_id;

        // Add billing address to order from IPN data.
        if (!isset($order_obj->order_id) || $order_obj->order_id != $order_id) {
          $order_obj = uc_order_load($order_id);
          $name = explode(' ', $_POST['address_name'], 2);
          $order_obj->billing_first_name = $name[0];
          $order_obj->billing_last_name = $name[1];
          $order_obj->billing_phone = $_POST['contact_phone'];
          $order_obj->billing_company = $_POST['payer_business_name'];
          $order_obj->billing_street1 = $_POST['address_street'];
          $order_obj->billing_city = $_POST['address_city'];
          $country = uc_get_country_data(array('country_iso_code_2' => $_POST['address_country_code']));
          $country_id = $country[0]['country_id'];
          $order_obj->billing_country = $country_id;

          $zone_id = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE (zone_code = '%s' OR zone_name = '%s') AND zone_country_id = %d", trim($_POST['address_state']), trim($_POST['address_state']), $country_id));
          $order_obj->billing_zone = $zone_id;
          $order_obj->billing_postal_code = $_POST['address_zip'];

          uc_order_save($order_obj);
        }

        $amount = $txn_payments[$order->item_id][$order->transaction_id];
        $comment = t('PayPal transaction ID: @txn_id', array('@txn_id' => $txn_id));
        uc_payment_enter($order_id, 'paypal_wps', $amount, $order->uid, NULL, $comment);
        uc_order_comment_save($order_id, 0, t('Payment of @amount @currency submitted through PayPal.', array('@amount' => uc_price($amount, $context, $options), '@currency' => $payment_currency)), 'order', 'payment_received');
        uc_order_comment_save($order_id, 0, t('PayPal IPN for @txn_id reported a payment of @amount @currency.', array('@txn_id' => $txn_id, '@amount' => uc_price($amount, $context, $options), '@currency' => $payment_currency)));
      }
    }

    db_query("INSERT INTO {uc_payment_paypal_ipn} (order_id, txn_id, txn_type, mc_gross, status, receiver_email, payer_email, received) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', %d)",
      $order_id, $txn_id, $txn_type, $total_payment_amount, $payment_status, $receiver_email, $payer_email, time());
  }
  elseif (strcmp($response->data, 'INVALID') == 0) {
    watchdog('uc_paypal', 'IPN transaction failed verification.', array(), WATCHDOG_ERROR);
    uc_order_comment_save($order_id, 0, t('An IPN transaction failed verification for this order.'), 'admin');
  }
  else {
    watchdog('uc_paypal', 'IPN transaction failed to fail verification. Possibly lost communication with PayPal temporarily.', array(), WATCHDOG_ERROR);
  }
}

