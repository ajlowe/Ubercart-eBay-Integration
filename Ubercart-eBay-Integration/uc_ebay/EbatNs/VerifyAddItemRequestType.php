<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'ExternalProductIDType.php';
require_once 'ItemType.php';
require_once 'AbstractRequestType.php';

/**
 * Enables a seller to specify the definition of a newitem and submit the 
 * definition to eBay without creating alisting. This enables the seller to testthe 
 * item definition and getlisting fees before actually listing the item.The listing 
 * fees may be differentfrom the listing fees returned by AddItem.<br><br>The call 
 * validates your input fields against the schema. However, somebusiness-logic 
 * checks performed for an AddItem call are not executed.For more information, 
 * please see the followingKnowledge Base article:<br><br><a 
 * href="http://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=912" 
 * target="_blank">VerifyAddItem returns Success with no Errors, but AddItem 
 * returns Failure with Errors</a><br><br>There are cases in which 
 * VerifyAddItembehaves differently from AddItem and returns a different result. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/VerifyAddItemRequestType.html
 *
 */
class VerifyAddItemRequestType extends AbstractRequestType
{
	/**
	 * @var ItemType
	 */
	protected $Item;
	/**
	 * @var boolean
	 */
	protected $IncludeExpressRequirements;
	/**
	 * @var ExternalProductIDType
	 */
	protected $ExternalProductID;

	/**
	 * @return ItemType
	 */
	function getItem()
	{
		return $this->Item;
	}
	/**
	 * @return void
	 * @param ItemType $value 
	 */
	function setItem($value)
	{
		$this->Item = $value;
	}
	/**
	 * @return boolean
	 */
	function getIncludeExpressRequirements()
	{
		return $this->IncludeExpressRequirements;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setIncludeExpressRequirements($value)
	{
		$this->IncludeExpressRequirements = $value;
	}
	/**
	 * @return ExternalProductIDType
	 */
	function getExternalProductID()
	{
		return $this->ExternalProductID;
	}
	/**
	 * @return void
	 * @param ExternalProductIDType $value 
	 */
	function setExternalProductID($value)
	{
		$this->ExternalProductID = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('VerifyAddItemRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Item' =>
				array(
					'required' => false,
					'type' => 'ItemType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'IncludeExpressRequirements' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductID' =>
				array(
					'required' => false,
					'type' => 'ExternalProductIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
