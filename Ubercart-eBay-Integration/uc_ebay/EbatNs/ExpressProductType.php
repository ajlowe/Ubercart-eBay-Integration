<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'EbatNs_ComplexType.php';
require_once 'ProductStateCodeType.php';
require_once 'NameValueListArrayType.php';
require_once 'AmountType.php';
require_once 'ExternalProductIDType.php';

/**
 * Information that eBay Express collects about an eBay catalog product. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/ExpressProductType.html
 *
 */
class ExpressProductType extends EbatNs_ComplexType
{
	/**
	 * @var string
	 */
	protected $Title;
	/**
	 * @var AmountType
	 */
	protected $MinPrice;
	/**
	 * @var AmountType
	 */
	protected $MaxPrice;
	/**
	 * @var anyURI
	 */
	protected $StockPhotoURL;
	/**
	 * @var int
	 */
	protected $ItemCount;
	/**
	 * @var ExternalProductIDType
	 */
	protected $ExternalProductID;
	/**
	 * @var long
	 */
	protected $ProductReferenceID;
	/**
	 * @var NameValueListArrayType
	 */
	protected $ItemSpecifics;
	/**
	 * @var anyURI
	 */
	protected $DetailsURL;
	/**
	 * @var ProductStateCodeType
	 */
	protected $ProductState;

	/**
	 * @return string
	 */
	function getTitle()
	{
		return $this->Title;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setTitle($value)
	{
		$this->Title = $value;
	}
	/**
	 * @return AmountType
	 */
	function getMinPrice()
	{
		return $this->MinPrice;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setMinPrice($value)
	{
		$this->MinPrice = $value;
	}
	/**
	 * @return AmountType
	 */
	function getMaxPrice()
	{
		return $this->MaxPrice;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setMaxPrice($value)
	{
		$this->MaxPrice = $value;
	}
	/**
	 * @return anyURI
	 */
	function getStockPhotoURL()
	{
		return $this->StockPhotoURL;
	}
	/**
	 * @return void
	 * @param anyURI $value 
	 */
	function setStockPhotoURL($value)
	{
		$this->StockPhotoURL = $value;
	}
	/**
	 * @return int
	 */
	function getItemCount()
	{
		return $this->ItemCount;
	}
	/**
	 * @return void
	 * @param int $value 
	 */
	function setItemCount($value)
	{
		$this->ItemCount = $value;
	}
	/**
	 * @return ExternalProductIDType
	 */
	function getExternalProductID()
	{
		return $this->ExternalProductID;
	}
	/**
	 * @return void
	 * @param ExternalProductIDType $value 
	 */
	function setExternalProductID($value)
	{
		$this->ExternalProductID = $value;
	}
	/**
	 * @return long
	 */
	function getProductReferenceID()
	{
		return $this->ProductReferenceID;
	}
	/**
	 * @return void
	 * @param long $value 
	 */
	function setProductReferenceID($value)
	{
		$this->ProductReferenceID = $value;
	}
	/**
	 * @return NameValueListArrayType
	 */
	function getItemSpecifics()
	{
		return $this->ItemSpecifics;
	}
	/**
	 * @return void
	 * @param NameValueListArrayType $value 
	 */
	function setItemSpecifics($value)
	{
		$this->ItemSpecifics = $value;
	}
	/**
	 * @return anyURI
	 */
	function getDetailsURL()
	{
		return $this->DetailsURL;
	}
	/**
	 * @return void
	 * @param anyURI $value 
	 */
	function setDetailsURL($value)
	{
		$this->DetailsURL = $value;
	}
	/**
	 * @return ProductStateCodeType
	 */
	function getProductState()
	{
		return $this->ProductState;
	}
	/**
	 * @return void
	 * @param ProductStateCodeType $value 
	 */
	function setProductState($value)
	{
		$this->ProductState = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('ExpressProductType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Title' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MinPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'StockPhotoURL' =>
				array(
					'required' => false,
					'type' => 'anyURI',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemCount' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductID' =>
				array(
					'required' => false,
					'type' => 'ExternalProductIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductReferenceID' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemSpecifics' =>
				array(
					'required' => false,
					'type' => 'NameValueListArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DetailsURL' =>
				array(
					'required' => false,
					'type' => 'anyURI',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductState' =>
				array(
					'required' => false,
					'type' => 'ProductStateCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
