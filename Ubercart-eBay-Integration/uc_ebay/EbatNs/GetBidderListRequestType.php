<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'UserIDType.php';
require_once 'GranularityLevelCodeType.php';
require_once 'AbstractRequestType.php';

/**
 * Retrieves all items the user is currently bidding on, orhas won or purchased. 
 * You can control the result set with elements such as ActiveItemsOnly, which 
 * limits the result set to active items. Note that since bidder information is 
 * anonymous to everyone except thebidder and the seller (during an active 
 * auction), only sellers who know the user IDs of their bidders will be able to 
 * make this API call successfully.See <a 
 * href="http://developer.ebay.com/DevZone/XML/docs/WebHelp/index.htm?context=eBay_XML_API&topic=AnonymousUserInfo">Working 
 * with Anonymous User Information</a> in the eBay Web Services Guide for more 
 * information. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetBidderListRequestType.html
 *
 */
class GetBidderListRequestType extends AbstractRequestType
{
	/**
	 * @var boolean
	 */
	protected $ActiveItemsOnly;
	/**
	 * @var dateTime
	 */
	protected $EndTimeFrom;
	/**
	 * @var dateTime
	 */
	protected $EndTimeTo;
	/**
	 * @var UserIDType
	 */
	protected $UserID;
	/**
	 * @var GranularityLevelCodeType
	 */
	protected $GranularityLevel;

	/**
	 * @return boolean
	 */
	function getActiveItemsOnly()
	{
		return $this->ActiveItemsOnly;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setActiveItemsOnly($value)
	{
		$this->ActiveItemsOnly = $value;
	}
	/**
	 * @return dateTime
	 */
	function getEndTimeFrom()
	{
		return $this->EndTimeFrom;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setEndTimeFrom($value)
	{
		$this->EndTimeFrom = $value;
	}
	/**
	 * @return dateTime
	 */
	function getEndTimeTo()
	{
		return $this->EndTimeTo;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setEndTimeTo($value)
	{
		$this->EndTimeTo = $value;
	}
	/**
	 * @return UserIDType
	 */
	function getUserID()
	{
		return $this->UserID;
	}
	/**
	 * @return void
	 * @param UserIDType $value 
	 */
	function setUserID($value)
	{
		$this->UserID = $value;
	}
	/**
	 * @return GranularityLevelCodeType
	 */
	function getGranularityLevel()
	{
		return $this->GranularityLevel;
	}
	/**
	 * @return void
	 * @param GranularityLevelCodeType $value 
	 */
	function setGranularityLevel($value)
	{
		$this->GranularityLevel = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetBidderListRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'ActiveItemsOnly' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'EndTimeFrom' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'EndTimeTo' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'UserID' =>
				array(
					'required' => false,
					'type' => 'UserIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'GranularityLevel' =>
				array(
					'required' => false,
					'type' => 'GranularityLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
