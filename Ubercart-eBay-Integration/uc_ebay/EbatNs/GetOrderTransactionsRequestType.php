<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'TransactionPlatformCodeType.php';
require_once 'ItemTransactionIDArrayType.php';
require_once 'OrderIDArrayType.php';
require_once 'AbstractRequestType.php';

/**
 * Retrieves information about one or more orders or one or more transactions(or 
 * both). If you have both orderIDs and itemIDs/transactionIDs, you may findthis 
 * "combined call" more convenient than calling GetOrders and 
 * GetItemTransactionsseparately.Note that every transaction is nested within an 
 * Ordernode, even if the transaction does not belong to an order.<br><br>Note: 
 * OrderID is not returned when the GetOrderTransactions request 
 * includesItemTransactionID, even if the transaction is part of an order.To get 
 * the OrderID for a transaction, call GetItemTransaction 
 * withIncludeContainingOrder = true.<br><br>Does not retrieve Express orders, even 
 * when the explicit Express OrderID found on the eBay Express site is included in 
 * the request. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetOrderTransactionsRequestType.html
 *
 */
class GetOrderTransactionsRequestType extends AbstractRequestType
{
	/**
	 * @var ItemTransactionIDArrayType
	 */
	protected $ItemTransactionIDArray;
	/**
	 * @var OrderIDArrayType
	 */
	protected $OrderIDArray;
	/**
	 * @var TransactionPlatformCodeType
	 */
	protected $Platform;
	/**
	 * @var boolean
	 */
	protected $IncludeFinalValueFees;

	/**
	 * @return ItemTransactionIDArrayType
	 */
	function getItemTransactionIDArray()
	{
		return $this->ItemTransactionIDArray;
	}
	/**
	 * @return void
	 * @param ItemTransactionIDArrayType $value 
	 */
	function setItemTransactionIDArray($value)
	{
		$this->ItemTransactionIDArray = $value;
	}
	/**
	 * @return OrderIDArrayType
	 */
	function getOrderIDArray()
	{
		return $this->OrderIDArray;
	}
	/**
	 * @return void
	 * @param OrderIDArrayType $value 
	 */
	function setOrderIDArray($value)
	{
		$this->OrderIDArray = $value;
	}
	/**
	 * @return TransactionPlatformCodeType
	 */
	function getPlatform()
	{
		return $this->Platform;
	}
	/**
	 * @return void
	 * @param TransactionPlatformCodeType $value 
	 */
	function setPlatform($value)
	{
		$this->Platform = $value;
	}
	/**
	 * @return boolean
	 */
	function getIncludeFinalValueFees()
	{
		return $this->IncludeFinalValueFees;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setIncludeFinalValueFees($value)
	{
		$this->IncludeFinalValueFees = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetOrderTransactionsRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'ItemTransactionIDArray' =>
				array(
					'required' => false,
					'type' => 'ItemTransactionIDArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'OrderIDArray' =>
				array(
					'required' => false,
					'type' => 'OrderIDArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Platform' =>
				array(
					'required' => false,
					'type' => 'TransactionPlatformCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'IncludeFinalValueFees' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
