<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'ItemListCustomizationType.php';
require_once 'AbstractRequestType.php';

/**
 * Returns a summary and details of items a user is selling fromthe user's My eBay 
 * account.<br />If you do not specify a detail level or a specific container,the 
 * response contains just the SellingSummary container.<br />If you specify a 
 * container but not a detail level, the responsecontains SellingSummary and any 
 * container you specified in therequest.<br />If you specify a DetailLevel of 
 * ReturnAll, the response containsthe SellingSummary and all other containers. Any 
 * containers thatwere not specified in the request are returned with 
 * defaultsettings.<br />While specifying pagination can help manage the amount of 
 * datathat is returned (especially at ReturnAll), high-volume sellersmay receive a 
 * warning message that the amount of data returnedis over the system limit and 
 * therefore truncated. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetMyeBaySellingRequestType.html
 *
 */
class GetMyeBaySellingRequestType extends AbstractRequestType
{
	/**
	 * @var ItemListCustomizationType
	 */
	protected $ScheduledList;
	/**
	 * @var ItemListCustomizationType
	 */
	protected $ActiveList;
	/**
	 * @var ItemListCustomizationType
	 */
	protected $SoldList;
	/**
	 * @var ItemListCustomizationType
	 */
	protected $UnsoldList;

	/**
	 * @return ItemListCustomizationType
	 */
	function getScheduledList()
	{
		return $this->ScheduledList;
	}
	/**
	 * @return void
	 * @param ItemListCustomizationType $value 
	 */
	function setScheduledList($value)
	{
		$this->ScheduledList = $value;
	}
	/**
	 * @return ItemListCustomizationType
	 */
	function getActiveList()
	{
		return $this->ActiveList;
	}
	/**
	 * @return void
	 * @param ItemListCustomizationType $value 
	 */
	function setActiveList($value)
	{
		$this->ActiveList = $value;
	}
	/**
	 * @return ItemListCustomizationType
	 */
	function getSoldList()
	{
		return $this->SoldList;
	}
	/**
	 * @return void
	 * @param ItemListCustomizationType $value 
	 */
	function setSoldList($value)
	{
		$this->SoldList = $value;
	}
	/**
	 * @return ItemListCustomizationType
	 */
	function getUnsoldList()
	{
		return $this->UnsoldList;
	}
	/**
	 * @return void
	 * @param ItemListCustomizationType $value 
	 */
	function setUnsoldList($value)
	{
		$this->UnsoldList = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetMyeBaySellingRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'ScheduledList' =>
				array(
					'required' => false,
					'type' => 'ItemListCustomizationType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ActiveList' =>
				array(
					'required' => false,
					'type' => 'ItemListCustomizationType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SoldList' =>
				array(
					'required' => false,
					'type' => 'ItemListCustomizationType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'UnsoldList' =>
				array(
					'required' => false,
					'type' => 'ItemListCustomizationType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
