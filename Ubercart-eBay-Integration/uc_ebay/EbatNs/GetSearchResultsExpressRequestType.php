<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'ExpressHistogramSortCodeType.php';
require_once 'UserIDType.php';
require_once 'ExpressDetailLevelCodeType.php';
require_once 'ExpressProductSortCodeType.php';
require_once 'ConditionSelectionCodeType.php';
require_once 'ExternalProductCodeType.php';
require_once 'AmountType.php';
require_once 'AbstractRequestType.php';
require_once 'ExpressItemSortCodeType.php';
require_once 'AffiliateTrackingDetailsType.php';

/**
 * <b>Please check this<a 
 * href="https://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=928">Knowledge 
 * Base article</a>for updates on current issues with 
 * GetSearchResultsExpress.</b><br><br>Retrieves brief details about active items 
 * that are listed on eBay Express, eBaycatalog products that have been used to 
 * pre-fill data in these items, and ahistogram that shows the distribution of 
 * items and catalog products across Expressdepartments, aisles, and/or product 
 * types.<br><br>This call only returns Express data for the site associated with 
 * the siteID that you specify in the request URL (for the SOAP API) or the 
 * X-EBAY-API-SITEIDheader (for the XML API). For example, if you specify site ID 
 * 0, then data forExpress US is returned. <br><br>Currently, this call is only 
 * supported for site ID 0 (Express US).<br><br>The Sandbox does not support 
 * GetSearchResultsExpress.<br><br>You can configure the call to retrieve only the 
 * item data, only the catalogproduct data, only the histogram, or any combination 
 * of these results. By default,the call returns brief summaries of 
 * each.<br><br><b>Item Results:</b> For each item returned (if any), the 
 * responseincludes a brief set of details, such as the item price (including 
 * shipping). Youcan retrieve more or fewer details about each item by using the 
 * ItemDetails field.To retrieve other details about a given item, use a call like 
 * GetSellerList orGetItem.<br><br><b>Catalog Product Results:</b> For each eBay 
 * catalog product returned(if any), the response includes a brief set of details, 
 * such as the minimum andmaximum price of listings that have been pre-filled based 
 * on that product. You canretrieve more or fewer details about each product by 
 * using the ProductDetailsfield.<br><br><b>Histogram Results:</b> Instead of 
 * grouping items by category, theExpress search engine groups items into 
 * <i>domains</i>. A domain is aset of items to which Express can apply a common 
 * set of search rules. Expresssupports three kinds of domains: <i>Product 
 * types</i>,<i>aisles</i>, and <i>departments</i>, like a typicaldepartment store. 
 * (The fact that we call these "domains" is not important tobuyers and sellers, 
 * but it can be helpful to understand the domain relationshipswhen you are working 
 * with the API.)<br><br>Listings with similar properties are classified into 
 * product type domains. Forexample, "DVDs & Movies" is a product type domain. 
 * Think of a product type asa type of good or service that can be purchased and as 
 * a leaf domain (which cannotbe the parent of other domains).<br><br><span 
 * class="tablenote"><b>Note:</b> An Express product type isnot the same as an eBay 
 * catalog product. Some Express product types are associatedwith eBay catalog 
 * products, but other Express product types are not.</span><br><br>When multiple 
 * product types share a common theme, Express groups them into anaisle or a 
 * department. For example, the Men's Jeans product type can be groupedwith Men's 
 * Pants into a Men's Clothing aisle. When multiple aisles share a commontheme, 
 * Express groups them into departments. For example, the Men's Clothing aislecan 
 * be grouped with a Men's Accessories aisle to form an Apparel & 
 * Accessoriesdepartment. If no groups make sense, a product type can stand alone 
 * without beinggrouped. For example, "DVDs & Movies" would not be grouped with 
 * other producttypes like Men's Jeans, so "DVDs & Movies" has no parent aisle or 
 * department.(From a user's perspective, this product type is elevated to look 
 * like adepartment, but in the API it is still classified as a product type.) 
 * Similarly,an aisle can stand alone without being grouped with other aisles into 
 * adepartment.<br><br>See the eBay Web Services guide link below for more 
 * information about departments, aisles, and producttypes. </p><p>This call 
 * returns a histogram that shows the number of items and catalog productsthat were 
 * found in each department, aisle, and/or product type that matches yoursearch 
 * criteria.<br><br>The domain names and groupings are subject to change. They are 
 * determined by theExpress search engine based on the items that are currently 
 * listed on Express aswell as historical buyer behavior. This means you need to 
 * callGetSearchResultsExpress to determine the current domain names and 
 * theirhierarchical relationships.<br><br><span class="tablenote"><b>Note:</b> A 
 * domain is a search notiononly. That is, items are not stored in domains on eBay, 
 * and domains are notequivalent to eBay categories (although Express may choose to 
 * organize and namesome domains to match eBay categories).</span> 
 * <br><br><b>Search Tips:</b></p><ul><li>Use either Query, ProductReferenceID, or 
 * the ExternalProductID fieldsto search for specific items and/or products. See 
 * the descriptions below forinformation about using these fields. (Only one of 
 * these query formats can beused per request.)</li><li>Use DepartmentName, 
 * AisleName, and/or ProductTypeName to browse orsearch within a particular domain. 
 * You can also specify the value "Express" inDepartmentName to retrieve a complete 
 * list of all available department, aisle,and product type names.</li><li>Use one 
 * or more filters like HighestPrice to refine thesearch.</li><li>Use sort options 
 * like ItemSort to control the order in which theresults are returned.</li><li>Use 
 * pagination options like EntriesPerPage to control how many resultsto return at a 
 * time.</li><li>Use verbose controls like ItemDetails to specify the data to 
 * returnwithin each result.</li></ul><p>The item results, catalog product results, 
 * and histogram results do notprovide references to each other. That is, the items 
 * don't indicate which domainsthey were found in, and the histogram doesn't 
 * specify which items were counted.However, you can infer these relationships by 
 * modifying your search parameters.For example, once you determine which domains 
 * match your query, you can callGetSearchResultsExpress again to browse or search 
 * each of those domains to findout which items they contain.</p><p>Please check 
 * this<a 
 * href="https://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=928">Knowledge 
 * Base article</a>for updates on current issues with 
 * GetSearchResultsExpress.</b><br><br></p> 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetSearchResultsExpressRequestType.html
 *
 */
class GetSearchResultsExpressRequestType extends AbstractRequestType
{
	/**
	 * @var string
	 */
	protected $Query;
	/**
	 * @var ExternalProductCodeType
	 */
	protected $ExternalProductIDType;
	/**
	 * @var string
	 */
	protected $ExternalProductIDValue;
	/**
	 * @var long
	 */
	protected $ProductReferenceID;
	/**
	 * @var string
	 */
	protected $DepartmentName;
	/**
	 * @var string
	 */
	protected $AisleName;
	/**
	 * @var string
	 */
	protected $ProductTypeName;
	/**
	 * @var ExpressHistogramSortCodeType
	 */
	protected $HistogramSort;
	/**
	 * @var ExpressItemSortCodeType
	 */
	protected $ItemSort;
	/**
	 * @var ExpressProductSortCodeType
	 */
	protected $ProductSort;
	/**
	 * @var AmountType
	 */
	protected $HighestPrice;
	/**
	 * @var AmountType
	 */
	protected $LowestPrice;
	/**
	 * @var ConditionSelectionCodeType
	 */
	protected $Condition;
	/**
	 * @var UserIDType
	 */
	protected $SellerID;
	/**
	 * @var string
	 */
	protected $PostalCode;
	/**
	 * @var ExpressDetailLevelCodeType
	 */
	protected $HistogramDetails;
	/**
	 * @var ExpressDetailLevelCodeType
	 */
	protected $ProductDetails;
	/**
	 * @var ExpressDetailLevelCodeType
	 */
	protected $ItemDetails;
	/**
	 * @var int
	 */
	protected $EntriesPerPage;
	/**
	 * @var int
	 */
	protected $PageNumber;
	/**
	 * @var AffiliateTrackingDetailsType
	 */
	protected $AffiliateTrackingDetails;

	/**
	 * @return string
	 */
	function getQuery()
	{
		return $this->Query;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setQuery($value)
	{
		$this->Query = $value;
	}
	/**
	 * @return ExternalProductCodeType
	 */
	function getExternalProductIDType()
	{
		return $this->ExternalProductIDType;
	}
	/**
	 * @return void
	 * @param ExternalProductCodeType $value 
	 */
	function setExternalProductIDType($value)
	{
		$this->ExternalProductIDType = $value;
	}
	/**
	 * @return string
	 */
	function getExternalProductIDValue()
	{
		return $this->ExternalProductIDValue;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setExternalProductIDValue($value)
	{
		$this->ExternalProductIDValue = $value;
	}
	/**
	 * @return long
	 */
	function getProductReferenceID()
	{
		return $this->ProductReferenceID;
	}
	/**
	 * @return void
	 * @param long $value 
	 */
	function setProductReferenceID($value)
	{
		$this->ProductReferenceID = $value;
	}
	/**
	 * @return string
	 */
	function getDepartmentName()
	{
		return $this->DepartmentName;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setDepartmentName($value)
	{
		$this->DepartmentName = $value;
	}
	/**
	 * @return string
	 */
	function getAisleName()
	{
		return $this->AisleName;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setAisleName($value)
	{
		$this->AisleName = $value;
	}
	/**
	 * @return string
	 */
	function getProductTypeName()
	{
		return $this->ProductTypeName;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setProductTypeName($value)
	{
		$this->ProductTypeName = $value;
	}
	/**
	 * @return ExpressHistogramSortCodeType
	 */
	function getHistogramSort()
	{
		return $this->HistogramSort;
	}
	/**
	 * @return void
	 * @param ExpressHistogramSortCodeType $value 
	 */
	function setHistogramSort($value)
	{
		$this->HistogramSort = $value;
	}
	/**
	 * @return ExpressItemSortCodeType
	 */
	function getItemSort()
	{
		return $this->ItemSort;
	}
	/**
	 * @return void
	 * @param ExpressItemSortCodeType $value 
	 */
	function setItemSort($value)
	{
		$this->ItemSort = $value;
	}
	/**
	 * @return ExpressProductSortCodeType
	 */
	function getProductSort()
	{
		return $this->ProductSort;
	}
	/**
	 * @return void
	 * @param ExpressProductSortCodeType $value 
	 */
	function setProductSort($value)
	{
		$this->ProductSort = $value;
	}
	/**
	 * @return AmountType
	 */
	function getHighestPrice()
	{
		return $this->HighestPrice;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setHighestPrice($value)
	{
		$this->HighestPrice = $value;
	}
	/**
	 * @return AmountType
	 */
	function getLowestPrice()
	{
		return $this->LowestPrice;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setLowestPrice($value)
	{
		$this->LowestPrice = $value;
	}
	/**
	 * @return ConditionSelectionCodeType
	 */
	function getCondition()
	{
		return $this->Condition;
	}
	/**
	 * @return void
	 * @param ConditionSelectionCodeType $value 
	 */
	function setCondition($value)
	{
		$this->Condition = $value;
	}
	/**
	 * @return UserIDType
	 */
	function getSellerID()
	{
		return $this->SellerID;
	}
	/**
	 * @return void
	 * @param UserIDType $value 
	 */
	function setSellerID($value)
	{
		$this->SellerID = $value;
	}
	/**
	 * @return string
	 */
	function getPostalCode()
	{
		return $this->PostalCode;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setPostalCode($value)
	{
		$this->PostalCode = $value;
	}
	/**
	 * @return ExpressDetailLevelCodeType
	 */
	function getHistogramDetails()
	{
		return $this->HistogramDetails;
	}
	/**
	 * @return void
	 * @param ExpressDetailLevelCodeType $value 
	 */
	function setHistogramDetails($value)
	{
		$this->HistogramDetails = $value;
	}
	/**
	 * @return ExpressDetailLevelCodeType
	 */
	function getProductDetails()
	{
		return $this->ProductDetails;
	}
	/**
	 * @return void
	 * @param ExpressDetailLevelCodeType $value 
	 */
	function setProductDetails($value)
	{
		$this->ProductDetails = $value;
	}
	/**
	 * @return ExpressDetailLevelCodeType
	 */
	function getItemDetails()
	{
		return $this->ItemDetails;
	}
	/**
	 * @return void
	 * @param ExpressDetailLevelCodeType $value 
	 */
	function setItemDetails($value)
	{
		$this->ItemDetails = $value;
	}
	/**
	 * @return int
	 */
	function getEntriesPerPage()
	{
		return $this->EntriesPerPage;
	}
	/**
	 * @return void
	 * @param int $value 
	 */
	function setEntriesPerPage($value)
	{
		$this->EntriesPerPage = $value;
	}
	/**
	 * @return int
	 */
	function getPageNumber()
	{
		return $this->PageNumber;
	}
	/**
	 * @return void
	 * @param int $value 
	 */
	function setPageNumber($value)
	{
		$this->PageNumber = $value;
	}
	/**
	 * @return AffiliateTrackingDetailsType
	 */
	function getAffiliateTrackingDetails()
	{
		return $this->AffiliateTrackingDetails;
	}
	/**
	 * @return void
	 * @param AffiliateTrackingDetailsType $value 
	 */
	function setAffiliateTrackingDetails($value)
	{
		$this->AffiliateTrackingDetails = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetSearchResultsExpressRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Query' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductIDType' =>
				array(
					'required' => false,
					'type' => 'ExternalProductCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductIDValue' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductReferenceID' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DepartmentName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'AisleName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductTypeName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HistogramSort' =>
				array(
					'required' => false,
					'type' => 'ExpressHistogramSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemSort' =>
				array(
					'required' => false,
					'type' => 'ExpressItemSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductSort' =>
				array(
					'required' => false,
					'type' => 'ExpressProductSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HighestPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'LowestPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Condition' =>
				array(
					'required' => false,
					'type' => 'ConditionSelectionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerID' =>
				array(
					'required' => false,
					'type' => 'UserIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PostalCode' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HistogramDetails' =>
				array(
					'required' => false,
					'type' => 'ExpressDetailLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductDetails' =>
				array(
					'required' => false,
					'type' => 'ExpressDetailLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemDetails' =>
				array(
					'required' => false,
					'type' => 'ExpressDetailLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'EntriesPerPage' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PageNumber' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'AffiliateTrackingDetails' =>
				array(
					'required' => false,
					'type' => 'AffiliateTrackingDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
