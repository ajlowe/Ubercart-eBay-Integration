<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'UserIDType.php';
require_once 'AbstractRequestType.php';

/**
 * Retrieves configuration information for the eBay store of the store owner 
 * specified with UserID. If no UserID is specified, the store configuration 
 * information is returned for the caller. The return value from GetStoreResponse 
 * is a StoreType, which containsthe store configuration, including the store name, 
 * URL, subscription level, andother data. You can set CategoryStructureOnly to 
 * true to retrieve onlyinformation about the category hierarchy of the store. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetStoreRequestType.html
 *
 */
class GetStoreRequestType extends AbstractRequestType
{
	/**
	 * @var boolean
	 */
	protected $CategoryStructureOnly;
	/**
	 * @var long
	 */
	protected $RootCategoryID;
	/**
	 * @var int
	 */
	protected $LevelLimit;
	/**
	 * @var UserIDType
	 */
	protected $UserID;

	/**
	 * @return boolean
	 */
	function getCategoryStructureOnly()
	{
		return $this->CategoryStructureOnly;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setCategoryStructureOnly($value)
	{
		$this->CategoryStructureOnly = $value;
	}
	/**
	 * @return long
	 */
	function getRootCategoryID()
	{
		return $this->RootCategoryID;
	}
	/**
	 * @return void
	 * @param long $value 
	 */
	function setRootCategoryID($value)
	{
		$this->RootCategoryID = $value;
	}
	/**
	 * @return int
	 */
	function getLevelLimit()
	{
		return $this->LevelLimit;
	}
	/**
	 * @return void
	 * @param int $value 
	 */
	function setLevelLimit($value)
	{
		$this->LevelLimit = $value;
	}
	/**
	 * @return UserIDType
	 */
	function getUserID()
	{
		return $this->UserID;
	}
	/**
	 * @return void
	 * @param UserIDType $value 
	 */
	function setUserID($value)
	{
		$this->UserID = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetStoreRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'CategoryStructureOnly' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RootCategoryID' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'LevelLimit' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'UserID' =>
				array(
					'required' => false,
					'type' => 'UserIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
