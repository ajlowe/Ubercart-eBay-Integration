<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'PaginatedOrderTransactionArrayType.php';
require_once 'SellingSummaryType.php';
require_once 'AbstractResponseType.php';
require_once 'PaginatedItemArrayType.php';
require_once 'MyeBaySellingSummaryType.php';

/**
 * Returns summary and detail information about items the user is selling,items 
 * scheduled to sell, currently listed, sold, and closed but not sold. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetMyeBaySellingResponseType.html
 *
 */
class GetMyeBaySellingResponseType extends AbstractResponseType
{
	/**
	 * @var SellingSummaryType
	 */
	protected $SellingSummary;
	/**
	 * @var PaginatedItemArrayType
	 */
	protected $ScheduledList;
	/**
	 * @var PaginatedItemArrayType
	 */
	protected $ActiveList;
	/**
	 * @var PaginatedOrderTransactionArrayType
	 */
	protected $SoldList;
	/**
	 * @var PaginatedItemArrayType
	 */
	protected $UnsoldList;
	/**
	 * @var MyeBaySellingSummaryType
	 */
	protected $Summary;

	/**
	 * @return SellingSummaryType
	 */
	function getSellingSummary()
	{
		return $this->SellingSummary;
	}
	/**
	 * @return void
	 * @param SellingSummaryType $value 
	 */
	function setSellingSummary($value)
	{
		$this->SellingSummary = $value;
	}
	/**
	 * @return PaginatedItemArrayType
	 */
	function getScheduledList()
	{
		return $this->ScheduledList;
	}
	/**
	 * @return void
	 * @param PaginatedItemArrayType $value 
	 */
	function setScheduledList($value)
	{
		$this->ScheduledList = $value;
	}
	/**
	 * @return PaginatedItemArrayType
	 */
	function getActiveList()
	{
		return $this->ActiveList;
	}
	/**
	 * @return void
	 * @param PaginatedItemArrayType $value 
	 */
	function setActiveList($value)
	{
		$this->ActiveList = $value;
	}
	/**
	 * @return PaginatedOrderTransactionArrayType
	 */
	function getSoldList()
	{
		return $this->SoldList;
	}
	/**
	 * @return void
	 * @param PaginatedOrderTransactionArrayType $value 
	 */
	function setSoldList($value)
	{
		$this->SoldList = $value;
	}
	/**
	 * @return PaginatedItemArrayType
	 */
	function getUnsoldList()
	{
		return $this->UnsoldList;
	}
	/**
	 * @return void
	 * @param PaginatedItemArrayType $value 
	 */
	function setUnsoldList($value)
	{
		$this->UnsoldList = $value;
	}
	/**
	 * @return MyeBaySellingSummaryType
	 */
	function getSummary()
	{
		return $this->Summary;
	}
	/**
	 * @return void
	 * @param MyeBaySellingSummaryType $value 
	 */
	function setSummary($value)
	{
		$this->Summary = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetMyeBaySellingResponseType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'SellingSummary' =>
				array(
					'required' => false,
					'type' => 'SellingSummaryType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ScheduledList' =>
				array(
					'required' => false,
					'type' => 'PaginatedItemArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ActiveList' =>
				array(
					'required' => false,
					'type' => 'PaginatedItemArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SoldList' =>
				array(
					'required' => false,
					'type' => 'PaginatedOrderTransactionArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'UnsoldList' =>
				array(
					'required' => false,
					'type' => 'PaginatedItemArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Summary' =>
				array(
					'required' => false,
					'type' => 'MyeBaySellingSummaryType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
