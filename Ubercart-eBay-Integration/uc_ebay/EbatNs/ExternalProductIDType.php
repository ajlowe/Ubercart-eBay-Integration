<?php
// autogenerated file 30.06.2008 14:46
// $Id: $
// $Log: $
//
//
require_once 'EbatNs_ComplexType.php';
require_once 'ExternalProductCodeType.php';

/**
 * Contains an ISBN value, EAN value, UPC value, ticket keywords, or eBaycatalog 
 * product ID, plus other meta-data. For event tickets, this typecan contain a set 
 * of keywords that uniquely identify the product. Onlyapplicable to certain 
 * categories that support Pre-filled ItemInformation. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/ExternalProductIDType.html
 *
 */
class ExternalProductIDType extends EbatNs_ComplexType
{
	/**
	 * @var string
	 */
	protected $Value;
	/**
	 * @var boolean
	 */
	protected $ReturnSearchResultOnDuplicates;
	/**
	 * @var ExternalProductCodeType
	 */
	protected $Type;
	/**
	 * @var string
	 */
	protected $AlternateValue;

	/**
	 * @return string
	 */
	function getValue()
	{
		return $this->Value;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setValue($value)
	{
		$this->Value = $value;
	}
	/**
	 * @return boolean
	 */
	function getReturnSearchResultOnDuplicates()
	{
		return $this->ReturnSearchResultOnDuplicates;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setReturnSearchResultOnDuplicates($value)
	{
		$this->ReturnSearchResultOnDuplicates = $value;
	}
	/**
	 * @return ExternalProductCodeType
	 */
	function getType()
	{
		return $this->Type;
	}
	/**
	 * @return void
	 * @param ExternalProductCodeType $value 
	 */
	function setType($value)
	{
		$this->Type = $value;
	}
	/**
	 * @return string
	 * @param integer $index 
	 */
	function getAlternateValue($index = null)
	{
		if ($index !== null) {
			return $this->AlternateValue[$index];
		} else {
			return $this->AlternateValue;
		}
	}
	/**
	 * @return void
	 * @param string $value 
	 * @param  $index 
	 */
	function setAlternateValue($value, $index = null)
	{
		if ($index !== null) {
			$this->AlternateValue[$index] = $value;
		} else {
			$this->AlternateValue = $value;
		}
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function addAlternateValue($value)
	{
		$this->AlternateValue[] = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('ExternalProductIDType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Value' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ReturnSearchResultOnDuplicates' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Type' =>
				array(
					'required' => false,
					'type' => 'ExternalProductCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'AlternateValue' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				)
			));

	}
}
?>
