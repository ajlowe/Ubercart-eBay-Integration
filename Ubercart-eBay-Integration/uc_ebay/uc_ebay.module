<?php
// $Id$ @file


/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function uc_ebay_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#uc_ebay":
      $output = '<p>'.  t("Create eBay listings from Ubercart producst") .'</p>';
      break;
  }
  return $output;
}

function uc_ebay_is_ebay_product($node) {
  // Load the node object if we received an integer as an argument.
  if (is_int($node)) {
    $node = node_load($node);
  }
  // Determine the node type based on the data type of $node.
  if (is_object($node)) {
    $type = $node->type;
  }
  elseif (is_array($node)) {
    $type = $node['type'];
  }
  elseif (is_string($node)) {
    $type = $node;
  }
  // If no node type was found, go ahead and return FALSE.
  if (!$type) {
    return FALSE;
  }
  // Return TRUE or FALSE depending on whether or not the node type is
  // ebay_product
  if ($type != 'uc_ebay_product') {
    return FALSE;
  }
  return TRUE;
}


/**
* Implementation of hook_menu().
*/
function uc_ebay_menu() {
  $items = array();

  $items['admin/store/settings/uc_ebay'] = array(
    'title' =>  'eBay settings',
    'description' => 'eBay Settings',
    'page callback' => 'uc_ebay_admin_settings_overview',
    #'page arguments' => array('uc_ebay_admin_settings_overview'),
    'access arguments' => array('access administration pages'),
    #'type' => MENU_NORMAL_ITEM,
   );
  $items['admin/store/settings/uc_ebay/overview'] = array(
    'title' =>  'Ubercart eBay module settings',
    'description' => 'Settings for the Ubercart eBay Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_ebay_admin_settings_overview'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEAFULT_LOCAL_TASK,
   );
  $items['admin/store/settings/uc_ebay/edit'] = array(
    'title' =>  'Ubercart eBay module settings',
    'description' => 'Settings for the Ubercart eBay Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_ebay_admin_settings_uc_ebay_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
   );
/*  $items['admin/store/settings/uc_ebay/categories'] = array(
    'title' =>  'eBay category listing',
    'description' => 'eBay Categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_ebay_admin_categories_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
   );
  $items['node/%node/eBay'] = array(
    'title' => 'eBay',
    'access callback' => 'uc_product_is_product',
    'access arguments' => array(1),
    'page callback' => 'uc_ebay_product_view_by_node',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/eBay/view'] = array(
    'title' => 'View eBay Products',
    'page callback' => 'uc_ebay_product_view_by_node',
    'access callback' => 'uc_product_is_product',
    'access arguments' => array(1),
    'weight' => 10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%node/eBay/edit'] = array(
    'title' => 'View eBay Products',
    'page callback' => 'uc_ebay_product_view_by_node',
    'access callback' => 'uc_product_is_product',
    'access arguments' => array(1),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
 */
  $items['uc_ebay/platform_notifications'] = array(
    'page callback' => 'uc_ebay_platform_notifications',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'uc_ebay.epn.inc',
  );

  //eBatNS test pages

  $items['uc_ebay/getitemtransactiontest'] = array(
    'title' => 'Get Item Transaction Test',
    'page callback' => 'uc_ebay_getitemtransactionstest',
    'access arguments' => array('access ebay content'),
    'description' => 'Get Item Transaction Test',
    'type' => MENU_CALLBACK,
  );
  $items['uc_ebay/getusertest'] = array(
    'title' => 'Get User Test',
    'page callback' => 'uc_ebay_getusertest',
    'access arguments' => array('access ebay content'),
    'description' => 'Get User Test',
    'type' => MENU_CALLBACK,
  );
  $items['uc_ebay/setnotificationpreferencestest'] = array(
    'title' => 'Set Notification Preferences Test',
    'page callback' => 'uc_ebay_setnotificationpreferencestest',
    'access arguments' => array('access ebay content'),
    'description' => 'Set Notification Preferences Test',
    'type' => MENU_CALLBACK,
  );
  $items['uc_ebay/getsellertransactiontest'] = array(
    'title' => 'Get Seller Transaction Test',
    'page callback' => 'uc_ebay_getsellertransactionstest',
    'access arguments' => array('access ebay content'),
    'description' => 'Get Seller Transaction Test',
    'type' => MENU_CALLBACK,
  );
  $items['uc_ebay/additemtest'] = array(
    'title' => 'Add Item Test',
    'page callback' => 'uc_ebay_additemtest',
    'access arguments' => array('access ebay content'),
    'description' => 'Add Item Test',
    'type' => MENU_CALLBACK,
  );
  $items['uc_ebay/notificationtest'] = array(
    'title' => 'Notification Test',
    'page callback' => 'uc_ebay_notificationtest',
    'access callback' => TRUE,
    'description' => 'Notification Test',
    'type' => MENU_CALLBACK,
  );
  $items['uc_ebay/notification_usage'] = array(
    'title' => 'Notification usage',
    'page callback' => 'uc_ebay_notification_usage',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function uc_ebay_menu_alter(&$items) {
  $items['uc_paypal/ipn']['page callback'] = 'uc_ebay_ipn';
  $items['uc_paypal/ipn']['file'] = 'uc_ebay.ipn.inc';
  $items['uc_paypal/ipn']['file path'] = drupal_get_path('module', 'uc_ebay');
}

function uc_ebay_ca_action() {
  $actions = array();

  if (module_exists('uc_shipping')) {
    $actions['uc_ebay_update_status'] = array(
      '#title' => t('Update the eBay order status'),
      '#category' => t('eBay'),
      '#callback' => 'uc_ebay_action_update_status',
      '#arguments' => array(
        'order' => array(
          '#entity' => 'uc_order',
          '#title' => t('Order'),
        ),
      ),
    );
  }

  return $actions;
}

function uc_ebay_action_update_status(&$order, $settings) {
  $session = uc_ebay_create_session('CompleteSaleRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');

  $req = new CompleteSaleRequestType();
  $shipment = new ShipmentType();

  $result = db_query("SELECT it.item_id, it.transaction_id, it.order_id, it.order_product_id, pp.package_id, p.tracking_number, s.carrier FROM {uc_ebay_item_transactions} AS it JOIN {uc_packaged_products} AS pp ON it.order_product_id = pp.order_product_id JOIN {uc_packages} AS p ON pp.package_id = p.package_id JOIN {uc_shipments} AS s ON p.sid = s.sid WHERE it.order_id = %d GROUP BY it.item_id, it.transaction_id ORDER BY NULL", $order->order_id);
  while ($item = db_fetch_object($result)) {
    $req->setItemID($item->item_id);
    $shipment->setShipmentTrackingNumber($item->tracking_number);
    $shipment->setShippingCarrierUsed($item->carrier);
    $req->setShipment($shipment);
    $req->setShipped(TRUE);
    $req->setTransactionID($item->transaction_id);

    $res = $cs->completeSale($req);

    if ($res->getAck() != 'Success') {
      foreach ($res->getErrors() as $error) {
        watchdog('uc_ebay', 'eBay order %txn_id not marked as shipped. "%severity: %message"', array('%txn_id' => $item->transaction_id, '%severity' => $error->getSeverityCode(), '%message' => $error->getLongMessage()), WATCHDOG_ERROR);
      }
    }
  }
}

function uc_ebay_order($op, &$order, $arg3) {
  switch ($op) {
    case 'save':
      $items = array();
      foreach ($order->products as $product) {
        if (isset($product->data['uc_ebay'])) {
          $item = $product->data['uc_ebay'];
          if (!db_result(db_query("SELECT COUNT(*) FROM {uc_ebay_item_transactions} WHERE order_product_id = %d", $product->order_product_id))) {
            db_query("INSERT INTO {uc_ebay_item_transactions} (item_id, transaction_id, order_id, order_product_id) VALUES ('%s', '%s', %d, %d)", $item['item_id'], $item['transaction_id'], $order->order_id, $product->order_product_id);
          }
        }
      }
      break;
  }
}

function uc_ebay_product_description($product) {
  if (isset($product->data['uc_ebay']) && !empty($product->data['uc_ebay']['view_url'])) {
    return array(
      'ebay_item' => array(
        '#value' => l('#'. $product->data['uc_ebay']['item_id'], $product->data['uc_ebay']['view_url'], array('absolute' => TRUE)),
        '#prefix' => '<br />',
      ),
    );
  }
}

function uc_ebay_get_listing_duration_options($category) {
  $path = drupal_get_path('module', 'uc_ebay');
  require_once $path .'/EbatNs/GetCategoryFeaturesRequestType.php';
  $session = uc_ebay_create_session();
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new GetCategoryFeaturesRequestType();
  $req->SetCategoryID($category);
  $res = $cs->GetCategoryFeatures($req);
  /*if ($detail_name == 'ShippingServiceDetails') {
    $shipping_options = $res->getShippingServiceDetails();
    foreach ($shipping_options as $shipping_option) {
      $result[$shipping_option->GetShippingService()] = $shipping_option->GetDescription();
    }
  }
  if ($detail_name == 'PaymentOptionDetails') {
    //uc_debug(9,'$Details Res: <pre>'. print_r($res,true).'</pre>');
    $payment_options = $res->getPaymentOptionDetails();
    foreach ($payment_options as $payment_option) {
      $result[$payment_option->GetPaymentOption()] = $payment_option->GetDescription();
    }
  }
  */
  $result = $res;
  //uc_debug(9,'$result: <pre>'. print_r($result,true).'</pre>');
  //uc_debug(9,'$result: <pre>'. print_r($result->GetFeatureDefinitions(),true).'</pre>');
  return $result;
}

function uc_ebay_get_ebay_details($detail_name,$site = 0) {
  $session = uc_ebay_create_session('GeteBayDetailsRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new GeteBayDetailsRequestType();
  $req->setDetailName($detail_name);
  //$req->setDetailLevel('ReturnAll');
  $res = $cs->GeteBayDetails($req);
  if ($detail_name == 'ShippingServiceDetails') {
    $shipping_options = $res->getShippingServiceDetails();
    foreach ($shipping_options as $shipping_option) {
      $result[$shipping_option->GetShippingService()] = $shipping_option->GetDescription();
    }
  }
  if ($detail_name == 'PaymentOptionDetails') {
    //uc_debug(9,'$Details Res: <pre>'. print_r($res,true).'</pre>');
    $payment_options = $res->getPaymentOptionDetails();
    foreach ($payment_options as $payment_option) {
      $result[$payment_option->GetPaymentOption()] = $payment_option->GetDescription();
    }
  }
  //uc_debug(9,'$result: <pre>'. print_r($result,true).'</pre>');
  return $result;
}

// Displays an overview of the uc_ebay settings.
function uc_ebay_admin_settings_overview() {
  // Load the form summaries for pages beneath this path.
  $summaries = summarize_child_form_pages('admin/store/settings/uc_ebay/edit', false, true);
  //uc_debug(9,'$summaries: <pre>'. print_r($summaries,true).'</pre>');

  // Build the block summary since it comes from another form.

  if (variable_get('uc_ebay_show_help_text', FALSE)) {
    $help_text = t('Help text is shown in block:') .'<br /><i>'
               . variable_get('uc_cart_ebay_text', t('Click title to display cart contents.')) .'</i>';
  }
  else {
    $help_text = t('Help text is not shown in block.');
  }
  /*$summaries[] = array(
    'path' => 'admin/store/settings/uc_ebay/edit/block',
    'href' => 'admin/store/settings/uc_ebaycart/edit/block',
    'title' => t('eBay block'),
    'items' => array(
      t('Cart block is !option when empty.', array('!option' => variable_get('uc_cart_empty_hide', FALSE) ? t('hidden') : t('shown'))),
      t('Cart block is !option by default.', array('!option' => variable_get('uc_cart_expanded', FALSE) ? t('expanded') : t('collapsed'))),
      $help_text,
    ),
  );
  */

  // Theme it all up in a summaries overview.
  //echo 'Hello Dolley';
  return theme('summary_overview', $summaries);
}
function uc_ebay_admin_settings_uc_ebay_form() {

  /* $default = variable_get('uc_ebay_default_payment_options', '');
  $options = uc_ebay_get_ebay_details('PaymentOptionDetails');
  $summary_default = array();
  foreach($default as $option){
    $summary_default[] = $options[$option];
  }
  $form['uc_ebay_default_payment_options'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Available Payment Methods '),
    '#description' => "Select the payment options which will be displayed on this site for eBay products from all the eBay supportd payment options available.", // added
    '#default_value' => $default,
    '#options' => $options,
    '#summary' => t('Selected Payment Options: '). '<br>'. join(';<br> ',$summary_default),
    //'#summary' => t('Selected Payment Options: @default', array('@default' => join(';<br> ',$summary_default))),
  );
  $default = variable_get('uc_ebay_default_shipping_options', '');
  $options = uc_ebay_get_ebay_details('ShippingServiceDetails');
  $summary_default = array();
  foreach($default as $option){
    $summary_default[] = $options[$option];
  }
  $form['uc_ebay_default_shipping_options'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Available Shipping Methods '),
    '#description' => "Select the shipping options which will be displayed on this site for eBay products from all the eBay supportd shipping options available.", // added
    '#default_value' => $default,
    '#options' => $options,
    '#summary' => t('Selected Shipping Options: '). '<br>'. join(';<br> ',$summary_default),
  ); */
  $default = variable_get('uc_ebay_default_app_mode', 'devel');
  $form['uc_ebay_default_app_mode'] = array(
    '#type' => 'select',
    '#title' => t('Application Mode'),
    '#description' => "Select Development mode, or Live mode.  Development mode is for testing and will only interact with eBay's test site (www.sandbox.ebay.com).  Change to live mode when you are sure everyting works and you are ready to create real eBay auctions.", // added
    '#default_value' => $default,
    '#options' => array(
      'devel' => t('Development'),
      'qa' => t('QA'),
      'localdebug' => t('Local Debug'),
      'live' => t('Live'),
      ),
    '#summary' => $default,
  );
  $default = variable_get('uc_ebay_default_dev_test_key', '');
  $form['uc_ebay_default_dev_test_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Development Test Key'),
    '#required' => TRUE,
    '#default_value' => $default,
    '#description' => "You must register at developer.ebay.com to get one of these keys.", // added
    '#size' => 36, // added
    '#maxlength' => 36, // added
    '#summary' => t('The Development Test Key is: @default', array('@default' => $default)),
  );
  $default = variable_get('uc_ebay_default_dev_app_key', '');
  $form['uc_ebay_default_dev_app_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Development Application Key'),
    '#required' => TRUE,
    '#default_value' => $default,
    '#description' => "You must register at developer.ebay.com to get one of these keys.", // added
    '#size' => 36, // added
    '#maxlength' => 36, // added
    '#summary' => t('The Development Application Key is: @default', array('@default' => $default)),
    //'#summary' => $default,
  );
  $default = variable_get('uc_ebay_default_dev_cert_key', '');
  $form['uc_ebay_default_dev_cert_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Development Certificate Key'),
    '#required' => TRUE,
    '#default_value' => $default,
    '#description' => "You must register at developer.ebay.com to get one of these keys.", // added
    '#size' => 36, // added
    '#maxlength' => 36, // added
    '#summary' => t('The Development Certificate Key is: @default', array('@default' => $default)),
  );
  $default = variable_get('uc_ebay_default_dev_user_token', '');
  $short_default = substr($default,0,10).'**********'.substr($default,-10,10);
  $form['uc_ebay_default_dev_user_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Development Test User Token'),
    '#required' => TRUE,
    '#default_value' => $default,
    '#description' => "You only need one of these if you are a developer, I think.", // added
    '#size' => 36, // added
    '#maxlength' => 873, // added
    '#summary' => t('The Development Test User Token is: @default', array('@default' => $short_default)),
  );
  return system_settings_form($form);
}

function uc_ebay_admin_settings_uc_ebay_form_submit() {
  variable_set('uc_ebay_default_payment_options', $form_state['values']['uc_ebay_default_payment_options']);
  variable_set('uc_ebay_default_shipping_options', $form_state['values']['uc_ebay_default_shipping_options']);
  variable_set('uc_ebay_default_app_mode', $form_state['values']['uc_ebay_default_app_mode']);
  variable_set('uc_ebay_default_dev_test_key', $form_state['values']['uc_ebay_default_dev_test_key']);
  variable_set('uc_ebay_default_dev_app_key', $form_state['values']['uc_ebay_default_dev_app_key']);
  variable_set('uc_ebay_default_dev_cert_key', $form_state['values']['uc_ebay_default_dev_cert_key']);
  variable_set('uc_ebay_default_dev_user_token', $form_state['values']['uc_ebay_default_dev_user_token']);
  //variable_set('uc_ebay_default_',$form_state['values']['uc_ebay_default_']);
}

function uc_ebay_get_credentials($node) {
  $app_modes = array(
    '' => '',
    'live' => 0,
    'devel' => 1,
    'qa' => 2,
    'localdebug' => 100,
  );
  $return['app_mode'] = $app_modes[variable_get('uc_ebay_default_app_mode', '')];

  $return['test_key'] = variable_get('uc_ebay_default_dev_test_key', '');
  $return['app_key'] = variable_get('uc_ebay_default_dev_app_key', '');
  $return['cert_key'] = variable_get('uc_ebay_default_dev_cert_key', '');
  $return['user_token'] = variable_get('uc_ebay_default_dev_user_token', '');
  return $return;
}

function uc_ebay_listing_form_submit($form, &$form_state) {
  drupal_set_message(t('The form has been submitted.'));
  $params = $form_state['values'];
  /**
   * sources
   */
  $session = uc_ebay_create_session(array('AddItemRequestType', 'VerifyAddItemRequestType'));
  $session->setUseStandardLogger(TRUE);

  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');

  $item = new ItemType();
  $item->setDescription($params['Description']);
  $item->setListingDuration($params['ListingDuration']);
  $item->setTitle($params['Title']);
  $item->setCurrency($params['Currency']);
  $item->setListingType($params['ListingType']);
  $item->setQuantity($params['Quantity']);

  $amount = new AmountType();
  $amount->setTypeValue($params['StartPrice']);
  $amount->setTypeAttribute('currencyID', $params['Currency']);
  $item->setStartPrice($params['StartPrice']);
  //$item->StartPrice->setTypeValue($params['StartPrice']);
  //$item->StartPrice->setTypeAttribute('currencyID', $params['Currency']);
  $item->setCountry($params['Country']);
  $item->setLocation($params['Location']);
  $category = new CategoryType();
  //$category = new CategoryType($params['CategoryID']);
  $category->setCategoryID($params['CategoryID']);
  $item->setPrimaryCategory($category);
  //$item->setPrimaryCategory->CategoryID = $params['CategoryID'];
  //$item->Site = 'Germany';
  //$item->ShipToLocations[]="Europe";
  $ShippingDetails = new ShippingDetailsType();
  $ShippingDetails->setShippingType('Flat');
  $ShippingServiceOptions = new ShippingServiceOptionsType();
  $ShippingDetails->SetShippingServiceOptions($ShippingServiceOptions);
  $ShippingServiceOptions->setShippingService($params['ShippingService']);
  $ShippingServiceOptions->setShippingServiceCost(5);
  $ShippingServiceOptions->setShippingServicePriority(1);
  //$shipping[]=$ShippingServiceOptions;
  //$InternationalShippingServiceOptions = new InternationalShippingServiceOptionsType();
  $cost = new AmountType();
  $cost->setTypeValue('5');
  $cost->setTypeAttribute('currencyID', $params['Currency']);
  //$InternationalShippingServiceOptions->setShippingService('DE_VersicherterVersandInternational');
  //$InternationalShippingServiceOptions->setShippingServiceCost(4.44);
  //$InternationalShippingServiceOptions->setShippingServicePriority(1);
  //$InternationalShippingServiceOptions->setShipToLocation('Europe');
  //$shippingInternational[]=$InternationalShippingServiceOptions;
  //$shippingObj = new ShippingDetailsType();
  //$shippingObj->setShippingType='Flat';
  //$shippingObj->setShippingServiceOptions($shipping, 0);
  //$shippingObj->setInternationalShippingServiceOption($InternationalShippingServiceOptions, 0);
  $item->setPaymentMethods($Facet_BuyerPaymentMethodCodeType->PaymentSeeDescription, 0);
  $item->setPaymentMethods($Facet_BuyerPaymentMethodCodeType->PayPal, 1);
  $item->setPayPalEmailAddress('ebay@vittitow.com');
  $item->setShippingDetails($ShippingDetails);

  $req = new AddItemRequestType();
  //$req->Item = $item;
  $req->setItem($item);

  $res = $cs->AddItem($req);
  //echo "Got Here B!<br>"; //remove
  //echo "<pre>";
  //print_r($item);
  //echo "</pre><br>";
  //echo "<pre>";
  //print_r($res);
  //echo "</pre><br>";
  echo "<pre>";
  $res = $cs->VerifyAddItem($req);
  print_r($res);
  echo "</pre><br>";
}

/**
 * Load EbatNs class files.
 *
 * Generally, only one RequestType class needs to be loaded as it will load any
 * data type classes and its corresponding ResponseType as needed.
 *
 * @param $classes
 *   An array of class names corresponding to their containing file's names. If
 *   only one file is needed, a string may be given instead.
 */
function uc_ebay_load_ebatns($classes = array()) {
  if (!is_array($classes)) {
    $classes = (array)$classes;
  }

  $path = drupal_get_path('module', 'uc_ebay');

  foreach ($classes as $class) {
    if (file_exists($path .'/EbatNs/'. $class .'.php')) {
      require_once $path .'/EbatNs/'. $class .'.php';
    }
  }
}

/**
 * Create and configure an EbatNs_Session object.
 *
 * Loads EbatNs_ServiceProxy.php for immediate use as well as any given class
 * names.
 *
 * @param $classes
 *   Additional class files to load in addition to EbatNs_ServiceProxy.php.
 * @return EbatNs_Session
 */
function uc_ebay_create_session($classes) {
  if (!is_array($classes)) {
    $classes = (array)$classes;
  }
  $classes[] = 'EbatNs_ServiceProxy';
  uc_ebay_load_ebatns($classes);

  $session = new EbatNs_Session();
  $credentials = uc_ebay_get_credentials($item_node);
  $session->setAppId($credentials['app_key']);
  $session->setDevId($credentials['dev_key']);
  $session->setCertId($credentials['cert_key']);
  // depends on the site working on (needs ID-Value!)
  $session->setSiteId(0);
  $session->setApiUrl("https://api.sandbox.ebay.com/wsapi");
  // environment (0=production, 1=sandbox)
  $session->setAppMode($credentials['app_mode']);
  // use a token as credential
  $session->setTokenMode(true);
  // do NOT use a token file !
  $session->setTokenUsePickupFile(false);
  // token of the user
  $session->setRequestToken($credentials['user_token']);

  return $session;
}


//function uc_ebay_manage_categories() {
//  return drupal_get_form('uc_ebay_admin_categories_form');
//}

function uc_ebay_admin_categories_form($form_state) {
//function uc_ebay_admin_categories_form($form_state=NULL) {
  //uc_debug(9,'$form_state: <pre>'. print_r($form_state,true).'</pre>');
  //test delete
  //uc_ebay_add_default_image_field();
  //test delete
  $site = 0;
  $vid = uc_ebay_get_vid($site);
  drupal_set_message('$vid: <pre>'. print_r($vid,true).'</pre>');
  $ebay_categories = uc_ebay_get_categories(2,false,Null);
  $category_array = $ebay_categories->getCategoryArray();
  $categories = array();
  foreach ($category_array as $ebay_category) {
    $categories[$ebay_category->getCategoryID()] = '('. $ebay_category->getCategoryID() .') '. $ebay_category->getCategoryName();
  };
  $form['ebay_categories'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Select the eBay top level categories you want to import'),
    //'#default_value' => variable_get('feed_item_length','teaser'),
    '#options' => $categories,
    //'#description' => t('Global setting for the length of XML feed items that are output by default.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import Categories'),
  );
  return $form;
}

function uc_ebay_admin_categories_form_submit($form, &$form_state) {
  uc_debug(9,'$form_state: <pre>'. print_r($form_state,true).'</pre>');
  if (!empty($form_state['values']['ebay_categories'])) {
    foreach ($form_state['values']['ebay_categories'] as $ebay_category) {
      $result = uc_ebay_get_categories(99,true,$ebay_category);
      uc_debug(9,'imported from parent '. $ebay_category .': <pre>'. print_r($result,true).'</pre>');
    }
  }
}

class handlerMethods
  {
  // import-need to pass in by ref !
  function handlerMethods(& $cs) {
    $cs->setHandler('CategoryType', array(& $this, 'handleCategory'));
  }
  function handleCategory($type, & $Category) {
    //#type $Category CategoryType
    //echo "(" . $Category->getCategoryID() .
    //"/" . print_r($Category->getCategoryParentID(),true) .
    //"/" . $Category->getCategoryParentID(0) .
    //"/" . $Category->CategoryParentID[0] .
    //") " . $Category->getCategoryName() . "<br>";
    $vid = uc_ebay_get_vid($site);
    unset($term);
    $tid = uc_ebay_get_tid($Category->getCategoryID());
    $parent = uc_ebay_get_tid($Category->getCategoryParentID(0));
    $term = array(
      'name' => check_plain(str_replace('&amp;','&',$Category->getCategoryName()).' ('. $Category->getCategoryID().')'),
      'vid' => $vid,
      'parent' => $parent,
      'tid' => $tid,
       //'description' => '',
      //'weight' => '',
      //'' => '',
    );
    if ($term['tid'] == $term['parent']) {
      $term['parent'] = 0;
    }
    //$term['name'] = str_replace('&amp;', '&', $term['name']);
    //uc_debug(9,'Saving Term:<pre>'.print_r($term,true).'</pre>');
    taxonomy_save_term($term);
    uc_ebay_set_tid($term['tid'], $Category->getCategoryID());
    return true;
  }
}

function uc_ebay_get_categories($level = 1, $handle_it = Null, $parents= Null) {
  //In Drupal the root of the taxonomy is 0, in eBay categories, this is undefined.
  if ($parents == 0 || $parents == '0') {
    $parents = Null;
  }
  set_time_limit(0);
  $session = uc_ebay_create_session('GetCategoriesRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  if ($handle_it) {
    $handler = new handlerMethods($cs);
  }
  $req = new GetCategoriesRequestType();
  if (is_array($parents)) {
    foreach ($parents as $parent) {
      $req->setCategoryParent($parent);
    }
  }
  else {
    $req->setCategoryParent($parents);
  }
  $req->setLevelLimit($level);
  $req->setDetailLevel('ReturnAll');
  $res = $cs->GetCategories($req);
  //uc_debug(print_r(9,$res,true));
  $categories = $res->getCategoryArray();
  //uc_debug(print_r(9,$categories,true));


  if (count($categories) > 0) {
    uc_debug(9,'count of categories: '.count($categories) );
    uc_debug(9,'$categories: '.'<pre>'.print_r($categories,true).'</pre>');
    foreach ($categories as $category_id => $category) {
      $category->setCategoryName(html_entity_decode($category->getCategoryName()));
      $new_categories[$category_id] = $category;
    }
    $res->setCategoryArray($new_categories);
  }
  //uc_debug(9,print_r($res,true));

  if ($res->getAck() != 'Success') {
    drupal_set_message(t('eBay category download failed!'));
    uc_debug(9,'$res->getAck: '. print_r($res->getAck,true));
    uc_debug(9,print_r($res,true));
  }
  else {
    //uc_debug(9,t('eBay category download complete!'));
    //uc_debug(9,print_r($res,true));
  }
  //print_r($res);
  return $res;
}

function uc_ebay_set_tid($tid, $cid) {
    db_query('DELETE FROM {uc_ebay_term_to_category} WHERE tid = %d', $tid);
    db_query("INSERT INTO {uc_ebay_term_to_category} (tid, cid) VALUES (%d, %d)", $tid, $cid);
    return true;
}
function uc_ebay_get_tid($cid) {
  $return = db_result(db_query('SELECT tid FROM {uc_ebay_term_to_category} WHERE cid = %d', $cid));
  //uc_debug(9,'<pre>tid: '.print_r($return,true).'</pre>');
  return $return;
}

function uc_ebay_get_cid($tid) {
  $return = db_result(db_query('SELECT cid FROM {uc_ebay_term_to_category} WHERE tid = %d', $tid));
  //uc_debug(9,'<pre>cid: '.print_r($return,true).'</pre>');
  return $return;
}

function uc_ebay_get_vid($site) {
  $site=0;
  //variable_del('uc_ebay_vid_'.$site);
  $vid = variable_get('uc_ebay_vid_'.$site,'');
  if (empty($vid) || is_null(taxonomy_vocabulary_load($vid))) {
    $vocabulary = array(
      'name' => t('eBay Categories for site: ').check_plain($site),
      'multiple' => '1',
      'required' => '1',
      'hierarchy' => '1',
      'relations' => '0',
      'module' => 'uc_ebay',
      'nodes' => array(
        'uc_ebay_product' => '1'
      )
    );
    taxonomy_save_vocabulary($vocabulary);
    $vid = $vocabulary['vid'];
    variable_set('uc_ebay_vid_'. $site, $vid);
  }
  return $vid;
}


function uc_ebay_nodeapi($node, $op) {
  if($node->type != 'uc_ebay_listing_template' or $op != 'view') {
   return;
  }
  uc_debug(9,'<pre>$node: '.print_r($node->content,true).'</pre>');
  uc_debug(9,'<pre>$op: '.print_r($op,true).'</pre>');
  $node->content['body']['#value'] = $node->content['body']['#value']. '<br> <a href="http://ebay.ubercart.com/uc_ebay/additemtest/'. $node->nid.'">Create Listing</a><br>';
  uc_debug(9,'<pre>$node: '.print_r($node->content,true).'</pre>');

}

function uc_ebay_getsellertransactionstest(){
  $result ='Get Seller Transaction Test';
  $session = uc_ebay_create_session('GetSellerTransactionsRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new GetSellerTransactionsRequestType();
  $now = time();
  $start = $now - (3600 * 24 * 20);
  $end = $start + 100 + (3600 * 24 * 20);
  // period 30 days
  //$req->SetModTimeFrom(gmdate('Y-m-d H:i:s', $start));
  //$req->SetModTimeTo(gmdate('Y-m-d H:i:s', $end));
  //$req->SetIncludeContainingOrder(True);
  $req->SetPagination(True);
  //$req->SetSKUArray(array('001'));
  $req->SetNumberOfDays(30);
  $req->SetDetailLevel("ReturnAll");
  $res = $cs->GetSellerTransactions($req);
  drupal_set_message('ReturnedTransactionCountActual: <pre>'. print_r($res->GetReturnedTransactionCountActual(),true).'</pre>');
  uc_debug(9,'ReturnedTransactionCountActual: <pre>'. print_r($res->GetReturnedTransactionCountActual(),true).'</pre>');
  uc_debug(9,'$req: <pre>'. print_r($req,true).'</pre>');
  uc_debug(9,'$res: <pre>'. print_r($res,true).'</pre>');
  uc_debug(9,'$cs: <pre>'. print_r($cs,true).'</pre>');
  return $result;
}

function uc_ebay_getitemtransactionstest(){
  $result ='Get Item Transaction Test';
  $session = uc_ebay_create_session('GetItemTransactionsRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new GetItemTransactionsRequestType();
  $now = time();
  $start = $now - (3600 * 24 * 30);
  $end = $start + 100 + (3600 * 24 * 30);
  // period 30 days
  //$req->SetModTimeFrom = gmdate('Y-m-d H:i:s', $start);
  //$req->SetModTimeTo = gmdate('Y-m-d H:i:s', $end);
  $req->SetItemID("110037633877");
  //$req->SetNumberOfDays(1);
  $req->SetDetailLevel("ReturnAll");
  uc_debug(9,'$req: <pre>'. print_r($req,true).'</pre>');
  $res = $cs->GetItemTransactions($req);
  uc_debug(9,'$res: <pre>'. print_r($res,true).'</pre>');

  return $result;
}

function uc_ebay_getusertest(){
  $result ='Get User Test';
  $session = uc_ebay_create_session('GetUserRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new GetUserRequestType();
  $req->SetItemID("110037633877");
  $req->SetUserID("testuser_uc_buy_1");
  uc_debug(9,'$req: <pre>'. print_r($req,true).'</pre>');
  $res = $cs->GetUser($req);
  uc_debug(9,'$res: <pre>'. print_r($res,true).'</pre>');

  return $result;
}

function uc_debug($level, $report, $severity=Null){
  $uc_debug_level = 10;
  $uc_report_location = 'drupal_set_message';
  $uc_report_location = 'watchdog';
  if ($level > $uc_debug_level) {
    return true;
  }
  if ($uc_report_location == 'drupal_set_message') {
    drupal_set_message($report);
  }
  elseif($uc_report_location == 'watchdog') {
    $severity = WATCHDOG_DEBUG;
    $link = Null;
    watchdog(t('Ubercart Debug'),$report, $variables=Null, $severity, $link);
  }
}

function uc_ebay_additemtest(){
  if (!check_plain(arg(2)) or !is_numeric(arg(2))) {
    echo "What's up doc?";
  }
  $node = node_load(arg(2));
  uc_debug(9,'Node: <pre>'. print_r($node,true).'</pre>');
  $result ='Add Item Test';

  $session = uc_ebay_create_session('AddItemRequestType');
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new AddItemRequestType();
  $item = new ItemType();
  //$pictures->SetGalleryType('Plus');
  //$pictures->SetGalleryType('Featured');
  //$item->SetCondition('New')// not the right call dufuss;
  $item->setCurrency('USD');
  $item->setCountry('US');
  $item->setCategoryMappingAllowed('true');
  $req->setItem($item);

  if (isset($node->title)){
    $item->setTitle($node->title);
  }
  if (isset($node->body)){
    $item->setDescription($node->body);
  }
  if (isset($node->field_uc_ebay_duration)){
    $item->setListingDuration($node->field_uc_ebay_duration[0]['value']);
 }
  if (isset($node->field_uc_ebay_quantity)){
    $item->setQuantity($node->field_uc_ebay_quantity['0']['value']);
  }
  if (isset($node->field_uc_ebay_paypal_email)){
    $item->setPayPalEmailAddress($node->field_uc_ebay_paypal_email);
  }
  if (isset($node->field_uc_ebay_location)){
    $item->setLocation($node->field_uc_ebay_location[0]['value']);
  }
  if (isset($node->field_uc_ebay_sub_title)){
    $item->setSubTitle($node->field_uc_ebay_sub_title[0]['value']);
  }
  if (isset($node->field_uc_ebay_start_price)){
    $item->setStartPrice($node->field_uc_ebay_start_price[0]['value']);
  }
  if (isset($node->field_uc_ebay_buy_it_now_price)){
    /*eBay considers "Buy It Now" and "Fixed Price" to be different in their API
    but they use "Buy It Now" for both terms on their website.
    A "fixed price" listing has a start price which is the "Buy It Now" price on
    the web page and will return an error if the API "Buy It Now" price is set.
    */
    if ($node->field_uc_ebay_listing_type[0]['value'] =='FixedPriceItem') {
      $item->setStartPrice($node->field_uc_ebay_buy_it_now_price[0]['value']);
    }
    else {
      $item->setBuyItNowPrice($node->field_uc_ebay_buy_it_now_price[0]['value']);
    }
  }
  if (isset($node->field_uc_ebay_sku)){
    $item->setSKU($node->field_uc_ebay_sku[0]['value']);
  }
  $pictures = new PictureDetailsType();
  if (isset($node->field_uc_ebay_gallery_image)){
    $pictures->SetGalleryType('Gallery');
    $pictures->setGalleryURL(url($node->field_uc_ebay_gallery_image['0']['filepath'],array('absolute' => 1)));
  }
  if (isset($node->field_uc_ebay_images)){
    foreach ($node->field_uc_ebay_images as $image) {
      $pictures->setPictureURL(url($image['filepath'],array('absolute' => 1)));
    }
  }
  $item->setPictureDetails($pictures);

  if (isset($node->field_uc_ebay_listing_type)){
    $item->setListingType($node->field_uc_ebay_listing_type[0]['value']);
  }
  $ShippingDetails = new ShippingDetailsType();
  $ShippingDetails->setShippingType('Flat');
  $ShippingServiceOptions = new ShippingServiceOptionsType();
  $ShippingDetails->SetShippingServiceOptions($ShippingServiceOptions);
  $ShippingServiceOptions->setFreeShipping(True);
  $ShippingServiceOptions->setShippingService('ShippingMethodStandard');
  $ShippingServiceOptions->setShippingServiceCost(0);
  $ShippingServiceOptions->setShippingServiceAdditionalCost(0);
  $ShippingServiceOptions->setShippingServicePriority(1);
  /*
  if (isset($node->field_uc_ebay_shipping_services)){
    foreach ($node->field_uc_ebay_shipping_services as $service) {
      $ShippingDetails->setShippingType($service['value']);
    }
  }
  */
  $item->setShippingDetails($ShippingDetails);

  if (isset($node->field_uc_ebay_payment_methods)){
    foreach ($node->field_uc_ebay_payment_methods as $method) {
      $item->setPaymentMethods($method['value']);
    }
  }
  if (isset($node->field_uc_ebay_categories)){
    foreach ($node->field_uc_ebay_categories as $key => $node_category) {
      //Need to fix taxonomy issue where eBay category # isn't easy to get to
      $value = taxonomy_get_term($node_category['value']);
      $value = explode('(', $value->name);
      $value = rtrim($value[1],')');
      if ($key == 0) {
        $category = new CategoryType();
        $category->setCategoryID($value);
        $item->setPrimaryCategory($category);
      }
      if ($key == 1) {
        $category = new CategoryType();
        $category->setCategoryID($value);
        $item->setSecondaryCategory($category);
      }
    }
  }
  //For Future Use
  //if (isset($node->field_uc_ebay_)){
  //  $item->set($node->field_uc_ebay_[0]['value']);
  //}
  //$item->SetCondition('New')// not the right call dufuss;

  uc_debug(9,'Item Request: <pre>'. print_r($req,true).'</pre>');
  uc_debug(9,'Item: <pre>'. print_r($item,true).'</pre>');
  $verify = $cs->VerifyAddItem($req);
  $result .= uc_ebay_debug_display_add_item_response($verify);
  $res = $cs->AddItem($req);
  uc_debug(9,'Item Response: <pre>'. print_r($res,true).'</pre>');
  $listing_node = uc_ebay_create_listing_node($res, $node->nid);
  uc_debug(9,'Listing Node: <pre>'. print_r($listing_node,true).'</pre>');
  return $result;
}

function uc_ebay_debug_display_add_item_response($response) {
  $return ='';
  if(!get_class($response) == 'VerifyAddItemResponseType') {
      $return = '$response is not a VerifyAddItemResponseType object.<br>';
      $return .= 'It is a: '.get_class($response);
      return $return;
  }
  uc_debug(9,'Verify Add ItemResponse Object: <pre>'. print_r($response,true).'</pre>');
  //$retun .= '<br>;
  if ($response->getAck() == 'Success') {
    $return .= '<br>ItemID: '.$response->getItemID();
    if (is_array($response->getFees()->getFee())) {
      foreach ($response->getFees()->getFee() as $fee) {
        $name = $fee->getName();
        $fee_object = $fee->getfee();
        $amount = $fee_object->getTypevalue();
        $return .= "<br>Name: $name  Amount: $amount";
      }
    }
  }
  else {
    $return = 'There was some sort of error, please see the watchdog log for more info.';
    return $return;
  }
  return $return;
}

function uc_ebay_create_listing_node($ebay_response, $template_node_id){
  if ($ebay_response->getAck() != 'Success') {
    uc_debug(9,'uc_ebay_create_listing_node was called with something besides a successfull eBay Add Item Response. $ebay_response received: <pre>'.print_r($ebay_response,true).'</pre>');
    return False;
  }
  $item_id = $ebay_response->getItemId();
  global $user;
  $template_node = node_load($template_node_id);
  $node = new StdClass();
  $node->type = 'uc_ebay_listing';
  $node->status = 1;
  $node->uid = $user->uid;
  $node->title = $item_id. ': '. $template_node->title;
  $node->field_uc_ebay_ebay_item_id[0]['value'] = $item_id;
  //Get info for body
  $app_mode = variable_get('uc_ebay_default_app_mode','');
  if ($app_mode == 'devel') {
    $tmpurl = 'http://cgi.sandbox.ebay.com/ws/eBayISAPI.dll?ViewItem&item=';
  }
  else {
    $tmpurl = 'http://cgi.ebay.com/ws/eBayISAPI.dll?ViewItem&item=';
  }
  $ebay_item_link = '<a href="'. $tmpurl. $item_id. '">'. $item_id. '</a>';
  $node->body = $ebay_item_link;
  $node->field_uc_ebay_listing_template[0]['value'] = $template_node_id;
  $node->field_uc_ebay_start_time[0]['value'] = $ebay_response->getStartTime();
  $node->field_uc_ebay_end_time[0]['value'] = $ebay_response->getEndTime();
  foreach ($template_node->taxonomy as $term) {
    $node->taxonomy[] = $term;
  }
  if (is_array($ebay_response->getFees()->getFee())) {
    $fee_count = 0;
    foreach ($ebay_response->getFees()->getFee() as $fee) {
      $name = $fee->getName();
      $fee_object = $fee->getfee();
      $amount = $fee_object->getTypevalue();
      if ($amount > 0) {
        drupal_set_message($name);
        $node->field_uc_ebay_fee_name[$fee_count]['value'] = $name;
        $node->field_uc_ebay_fee_amount[$fee_count]['value'] = $amount;
        $fee_count++;
      }
    }
  }
  node_save($node);
  return $node;
}




/*
function uc_ebay_additemtest(){  //original
  $result ='Add Item Test';
  $path = drupal_get_path('module', 'uc_ebay');
  require_once $path .'/EbatNs/AddItemRequestType.php';
  require_once $path .'/EbatNs/ItemType.php';
  //require_once $path .'/EbatNs/PictureDetailsType.php';
  $session = uc_ebay_create_session();
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';
  $req = new AddItemRequestType();
  $item = new ItemType();
  $item->setCategoryMappingAllowed('true');
  $item->setDescription('Uber Test');
  $item->setListingDuration('Days_7');
  $item->setTitle('Uber Test Item Title 1');
  $item->setCurrency('USD');
  $item->setListingType('FixedPriceItem');
  $item->setQuantity('10');
  $amount = new AmountType();
  $amount->setTypeValue('10');
  $amount->setTypeAttribute('currencyID', 'USD');
  $item->setStartPrice('10');
  $item->setCountry('US');
  $item->setLocation('Louisville, KY');
  $category = new CategoryType();
  //$category->setCategoryID('14111'); //Test Auctions
  $category->setCategoryID('53229'); //ice makers
  $item->setPrimaryCategory($category);
  $ShippingDetails = new ShippingDetailsType();
  $ShippingDetails->setShippingType('Flat');
  $ShippingServiceOptions = new ShippingServiceOptionsType();
  $ShippingDetails->SetShippingServiceOptions($ShippingServiceOptions);
  $ShippingServiceOptions->setShippingService('ShippingMethodStandard');
  $ShippingServiceOptions->setShippingServiceCost(5);
  $ShippingServiceOptions->setShippingServiceAdditionalCost(5);
  $ShippingServiceOptions->setShippingServicePriority(1);
  $item->SetSKU('001');
  $pictures = new PictureDetailsType();
  $pictures->SetGalleryURL('http://ebay.ubercart.com/sites/ebay.ubercart.com/files/tbc-65sd_0.jpg.thumb.jpg');
  $pictures->addPictureURL('http://ebay.ubercart.com/sites/ebay.ubercart.com/files/badge2_rev.jpg.thumb.jpg');
  $pictures->addPictureURL('http://ebay.ubercart.com/sites/ebay.ubercart.com/files/tbc-65sd.jpg');
  $pictures->SetGalleryType('Plus');
  //$pictures->SetGalleryType('Featured');
  //$pictures->SetGalleryType('Gallery');
  $item->SetPictureDetails($pictures);
  //$item->SetCondition('New')// not the right call dufuss;
  $cost = new AmountType();
  $cost->setTypeValue('5');
  $cost->setTypeAttribute('currencyID', 'USD');
  $item->setPaymentMethods('PaymentSeeDescription');
  $item->setPaymentMethods('PayPal');
  $item->setPayPalEmailAddress('ebay@primasupply.com');
  $item->setShippingDetails($ShippingDetails);
  $req->setItem($item);

  //uc_debug(9,'$req: <pre>'. print_r($req,true).'</pre>');
  uc_debug(9,'$item: <pre>'. print_r($item,true).'</pre>');
  uc_debug(9,'<pre>'.print_r($pictures,true).'</pre>');
  $verify = $cs->VerifyAddItem($req);
  uc_debug(9,'$verify: <pre>'. print_r($verify,true).'</pre>');
  $res = $cs->AddItem($req);
  uc_debug(9,'$res: <pre>'. print_r($res,true).'</pre>');

  return $result;
}
*/

function uc_ebay_notification_usage() {
  $output = t('Notification Usage');
  $session = uc_ebay_create_session('GetNotificationsUsageRequestType');

  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $req = new GetNotificationsUsageRequestType();
  $req->setItemID(110041158951);

  $output .= dpr($req, TRUE, '$req');
  $res = $cs->GetNotificationsUsage($req);
  $output .= dpr($res, TRUE, '$res');

  return $output;
}

function uc_ebay_notificationtest(){
  $result = 'Notification Test';


  $path = drupal_get_path('module', 'uc_ebay');
  require_once $path .'/EbatNs/EbatNs_NotificationClient.php';
  $handler = new EbatNs_NotificationClient('EbatNs_DataConverterUtf8');
  $msg = file_get_contents('php://input');
  $res = $handler->getResponse($msg);

  if (uc_ebay_validate_notification($res)) {
    uc_debug(9,'$res: <pre>'. print_r($res, true).'</pre>');
    uc_debug(9,'$msg: <pre>'. print_r(check_plain($msg), true).'</pre>');
  }

  return $result;
}

function uc_ebay_validate_notification($res) {
  $timestamp = $res->getTimestamp();
  $ebay_time = strtotime($timestamp);
  $now = time();
  $ten_minutes = 600;

  // Allow eBay Time to be up to 10 minutes early or late.
  if ($ebay_time > $now - $ten_minutes && $ebay_time < $now + $ten_minutes) {
    $dev_key = variable_get('uc_ebay_default_dev_test_key', '');
    $app_key = variable_get('uc_ebay_default_dev_app_key', '');
    $cert_key = variable_get('uc_ebay_default_dev_cert_key', '');

    $hash_key = $timestamp . $dev_key . $app_key . $cert_key;
    $hash = md5($hash_key, TRUE);
    $signature = base64_encode($hash);

    //uc_debug(9, 'Computed signature: <pre>'. $signature .'</pre>');
    //uc_debug(9, 'Response signature: <pre>'. trim($res->getNotificationSignature()) .'</pre>');

    // EbatNs puts a couple of \n characters at the end of the
    // NotificationSignature for some goofy reason.
    return $signature == trim($res->getNotificationSignature());
  }

  return FALSE;
}

function uc_ebay_setnotificationpreferencestest(){
  $result ='Set Notifications Test';
  $session = uc_ebay_create_session(array('SetNotificationPreferencesRequestType', 'GetNotificationPreferencesRequestType'));
  $cs = new EbatNs_ServiceProxy($session, 'EbatNs_DataConverterUtf8');
  $cs->_debugLogDestination = '';

  /* $req = new SetNotificationPreferencesRequestType();
  $preferences = new ApplicationDeliveryPreferencesType();
  $preferences->setApplicationURL('http://prima-restaurant-equipment.com/uc_ebay/notificationtest');
  $preferences->setApplicationEnable('Enable');
  $preferences->setAlertEnable('Enable');
  $preferences->setDeviceType('Platform');
  // legacy is still default !
  $preferences->setNotificationPayloadType('eBLSchemaSOAP');
  $req->setApplicationDeliveryPreferences($preferences);

  // a specific notification to subscribe to
  $notification = new NotificationEnableType();
  $notification->setEventEnable('Enable');
  $notification->setEventType('FixedPriceTransaction');

  $notifications = new NotificationEnableArrayType();
  $notifications->setNotificationEnable($notification, 0);
  $req->setUserDeliveryPreferenceArray($notifications);

  //$req->setItemID("110037633877");
  //$req->setUserID("testuser_uc_buy_1");
  uc_debug(9,'$req: <pre>'. print_r($req,true).'</pre>');
  $res = $cs->setNotificationPreferences($req);
  uc_debug(9,'$res: <pre>'. print_r($res,true).'</pre>'); */

  $req = new GetNotificationPreferencesRequestType();
  $req->setPreferenceLevel('User');

  $result .= dpr($req, TRUE, '$req');
  $res = $cs->getNotificationPreferences($req);
  $result .= dpr($res, TRUE, '$res');

  return $result;
}
